/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package se.kth.integral.oms.implementation;

import retrofit2.Retrofit;
import se.kth.integral.oms.Querys;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.Period;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import se.kth.integral.oms.models.ErrorResponseException;
import se.kth.integral.oms.models.QueryBody;
import se.kth.integral.oms.models.QueryResults;

/**
 * An instance of this class provides access to all the operations defined
 * in Querys.
 */
public class QuerysImpl implements Querys {
    /** The Retrofit service to perform REST calls. */
    private QuerysService service;
    /** The service client containing this operation class. */
    private AzureLogAnalyticsImpl client;

    /**
     * Initializes an instance of Querys.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public QuerysImpl(Retrofit retrofit, AzureLogAnalyticsImpl client) {
        this.service = retrofit.create(QuerysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Querys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface QuerysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: se.kth.integral.oms.Querys get" })
        @GET("workspaces/{workspaceId}/query")
        Observable<Response<ResponseBody>> get(@Path("workspaceId") String workspaceId, @Query("query") String query, @Query("timespan") Period timespan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: se.kth.integral.oms.Querys post" })
        @POST("workspaces/{workspaceId}/query")
        Observable<Response<ResponseBody>> post(@Path("workspaceId") String workspaceId, @Body QueryBody body);

    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryResults object if successful.
     */
    public QueryResults get(String query) {
        return getWithServiceResponseAsync(query).toBlocking().single().body();
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QueryResults> getAsync(String query, final ServiceCallback<QueryResults> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(query), serviceCallback);
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<QueryResults> getAsync(String query) {
        return getWithServiceResponseAsync(query).map(new Func1<ServiceResponse<QueryResults>, QueryResults>() {
            @Override
            public QueryResults call(ServiceResponse<QueryResults> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<ServiceResponse<QueryResults>> getWithServiceResponseAsync(String query) {
        if (this.client.workspaceId() == null) {
            throw new IllegalArgumentException("Parameter this.client.workspaceId() is required and cannot be null.");
        }
        if (query == null) {
            throw new IllegalArgumentException("Parameter query is required and cannot be null.");
        }
        final Period timespan = null;
        return service.get(this.client.workspaceId(), query, timespan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResults>>>() {
                @Override
                public Observable<ServiceResponse<QueryResults>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResults> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryResults object if successful.
     */
    public QueryResults get(String query, Period timespan) {
        return getWithServiceResponseAsync(query, timespan).toBlocking().single().body();
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QueryResults> getAsync(String query, Period timespan, final ServiceCallback<QueryResults> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(query, timespan), serviceCallback);
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<QueryResults> getAsync(String query, Period timespan) {
        return getWithServiceResponseAsync(query, timespan).map(new Func1<ServiceResponse<QueryResults>, QueryResults>() {
            @Override
            public QueryResults call(ServiceResponse<QueryResults> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data.
     *
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<ServiceResponse<QueryResults>> getWithServiceResponseAsync(String query, Period timespan) {
        if (this.client.workspaceId() == null) {
            throw new IllegalArgumentException("Parameter this.client.workspaceId() is required and cannot be null.");
        }
        if (query == null) {
            throw new IllegalArgumentException("Parameter query is required and cannot be null.");
        }
        return service.get(this.client.workspaceId(), query, timespan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResults>>>() {
                @Override
                public Observable<ServiceResponse<QueryResults>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResults> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QueryResults> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<QueryResults, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<QueryResults>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.
     *
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryResults object if successful.
     */
    public QueryResults post(QueryBody body) {
        return postWithServiceResponseAsync(body).toBlocking().single().body();
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.
     *
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QueryResults> postAsync(QueryBody body, final ServiceCallback<QueryResults> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(body), serviceCallback);
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.
     *
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<QueryResults> postAsync(QueryBody body) {
        return postWithServiceResponseAsync(body).map(new Func1<ServiceResponse<QueryResults>, QueryResults>() {
            @Override
            public QueryResults call(ServiceResponse<QueryResults> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute an Analytics query.
     * Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.
     *
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResults object
     */
    public Observable<ServiceResponse<QueryResults>> postWithServiceResponseAsync(QueryBody body) {
        if (this.client.workspaceId() == null) {
            throw new IllegalArgumentException("Parameter this.client.workspaceId() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.post(this.client.workspaceId(), body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResults>>>() {
                @Override
                public Observable<ServiceResponse<QueryResults>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResults> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QueryResults> postDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<QueryResults, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<QueryResults>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
