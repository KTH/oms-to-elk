/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package se.kth.integral.azure.opinsights;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.util.List;
import rx.Observable;
import se.kth.integral.azure.opinsights.models.LinkTarget;
import se.kth.integral.azure.opinsights.models.SearchGetSchemaResponse;
import se.kth.integral.azure.opinsights.models.SearchParameters;
import se.kth.integral.azure.opinsights.models.SearchResultsResponse;

/**
 * An instance of this class provides access to all the operations defined
 * in Workspaces.
 */
public interface Workspaces {
    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the List&lt;LinkTarget&gt; object if successful.
     */
    List<LinkTarget> listLinkTargets();

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<List<LinkTarget>> listLinkTargetsAsync(final ServiceCallback<List<LinkTarget>> serviceCallback);

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the observable to the List&lt;LinkTarget&gt; object
     */
    Observable<List<LinkTarget>> listLinkTargetsAsync();

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the observable to the List&lt;LinkTarget&gt; object
     */
    Observable<ServiceResponse<List<LinkTarget>>> listLinkTargetsWithServiceResponseAsync();

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the SearchGetSchemaResponse object if successful.
     */
    SearchGetSchemaResponse getSchema(String resourceGroupName, String workspaceName);

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName, final ServiceCallback<SearchGetSchemaResponse> serviceCallback);

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SearchGetSchemaResponse object
     */
    Observable<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName);

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SearchGetSchemaResponse object
     */
    Observable<ServiceResponse<SearchGetSchemaResponse>> getSchemaWithServiceResponseAsync(String resourceGroupName, String workspaceName);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the SearchResultsResponse object if successful.
     */
    SearchResultsResponse getSearchResults(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<SearchResultsResponse> getSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters, final ServiceCallback<SearchResultsResponse> serviceCallback);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<SearchResultsResponse> getSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<ServiceResponse<SearchResultsResponse>> getSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the SearchResultsResponse object if successful.
     */
    SearchResultsResponse beginGetSearchResults(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<SearchResultsResponse> beginGetSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters, final ServiceCallback<SearchResultsResponse> serviceCallback);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<SearchResultsResponse> beginGetSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<ServiceResponse<SearchResultsResponse>> beginGetSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, SearchParameters parameters);

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the SearchResultsResponse object if successful.
     */
    SearchResultsResponse updateSearchResults(String resourceGroupName, String workspaceName, String id);

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<SearchResultsResponse> updateSearchResultsAsync(String resourceGroupName, String workspaceName, String id, final ServiceCallback<SearchResultsResponse> serviceCallback);

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<SearchResultsResponse> updateSearchResultsAsync(String resourceGroupName, String workspaceName, String id);

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the observable to the SearchResultsResponse object
     */
    Observable<ServiceResponse<SearchResultsResponse>> updateSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, String id);

}
