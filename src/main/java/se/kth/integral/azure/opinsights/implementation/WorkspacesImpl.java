/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package se.kth.integral.azure.opinsights.implementation;

import retrofit2.Retrofit;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import se.kth.integral.azure.opinsights.Workspaces;
import se.kth.integral.azure.opinsights.models.LinkTarget;
import se.kth.integral.azure.opinsights.models.SearchGetSchemaResponse;
import se.kth.integral.azure.opinsights.models.SearchParameters;
import se.kth.integral.azure.opinsights.models.SearchResultsResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Workspaces.
 */
public final class WorkspacesImpl implements Workspaces {
    /** The Retrofit service to perform REST calls. */
    private WorkspacesService service;
    /** The service client containing this operation class. */
    private AzureLogAnalyticsImpl client;

    /**
     * Initializes an instance of WorkspacesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkspacesImpl(Retrofit retrofit, AzureLogAnalyticsImpl client) {
        this.service = retrofit.create(WorkspacesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Workspaces to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkspacesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/linkTargets")
        Observable<Response<ResponseBody>> listLinkTargets(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema")
        Observable<Response<ResponseBody>> getSchema(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/search")
        Observable<Response<ResponseBody>> getSearchResults(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("subscriptionId") String subscriptionId, @Body SearchParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/search")
        Observable<Response<ResponseBody>> beginGetSearchResults(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("subscriptionId") String subscriptionId, @Body SearchParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/search/{id}")
        Observable<Response<ResponseBody>> updateSearchResults(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("id") String id, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the List&lt;LinkTarget&gt; object if successful.
     */
    public List<LinkTarget> listLinkTargets() {
        return listLinkTargetsWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<LinkTarget>> listLinkTargetsAsync(final ServiceCallback<List<LinkTarget>> serviceCallback) {
        return ServiceCall.create(listLinkTargetsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the observable to the List&lt;LinkTarget&gt; object
     */
    public Observable<List<LinkTarget>> listLinkTargetsAsync() {
        return listLinkTargetsWithServiceResponseAsync().map(new Func1<ServiceResponse<List<LinkTarget>>, List<LinkTarget>>() {
            @Override
            public List<LinkTarget> call(ServiceResponse<List<LinkTarget>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @return the observable to the List&lt;LinkTarget&gt; object
     */
    public Observable<ServiceResponse<List<LinkTarget>>> listLinkTargetsWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listLinkTargets(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LinkTarget>>>>() {
                @Override
                public Observable<ServiceResponse<List<LinkTarget>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<LinkTarget>> clientResponse = listLinkTargetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<LinkTarget>> listLinkTargetsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<List<LinkTarget>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<List<LinkTarget>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the SearchGetSchemaResponse object if successful.
     */
    public SearchGetSchemaResponse getSchema(String resourceGroupName, String workspaceName) {
        return getSchemaWithServiceResponseAsync(resourceGroupName, workspaceName).toBlocking().single().getBody();
    }

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName, final ServiceCallback<SearchGetSchemaResponse> serviceCallback) {
        return ServiceCall.create(getSchemaWithServiceResponseAsync(resourceGroupName, workspaceName), serviceCallback);
    }

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SearchGetSchemaResponse object
     */
    public Observable<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName) {
        return getSchemaWithServiceResponseAsync(resourceGroupName, workspaceName).map(new Func1<ServiceResponse<SearchGetSchemaResponse>, SearchGetSchemaResponse>() {
            @Override
            public SearchGetSchemaResponse call(ServiceResponse<SearchGetSchemaResponse> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SearchGetSchemaResponse object
     */
    public Observable<ServiceResponse<SearchGetSchemaResponse>> getSchemaWithServiceResponseAsync(String resourceGroupName, String workspaceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getSchema(resourceGroupName, workspaceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SearchGetSchemaResponse>>>() {
                @Override
                public Observable<ServiceResponse<SearchGetSchemaResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SearchGetSchemaResponse> clientResponse = getSchemaDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SearchGetSchemaResponse> getSchemaDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SearchGetSchemaResponse, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SearchGetSchemaResponse>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the SearchResultsResponse object if successful.
     */
    public SearchResultsResponse getSearchResults(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        return getSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters).toBlocking().last().getBody();
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SearchResultsResponse> getSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters, final ServiceCallback<SearchResultsResponse> serviceCallback) {
        return ServiceCall.create(getSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters), serviceCallback);
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable for the request
     */
    public Observable<SearchResultsResponse> getSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        return getSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters).map(new Func1<ServiceResponse<SearchResultsResponse>, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(ServiceResponse<SearchResultsResponse> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SearchResultsResponse>> getSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.getSearchResults(resourceGroupName, workspaceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<SearchResultsResponse>() { }.getType());
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the SearchResultsResponse object if successful.
     */
    public SearchResultsResponse beginGetSearchResults(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        return beginGetSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters).toBlocking().single().getBody();
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SearchResultsResponse> beginGetSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters, final ServiceCallback<SearchResultsResponse> serviceCallback) {
        return ServiceCall.create(beginGetSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters), serviceCallback);
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<SearchResultsResponse> beginGetSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        return beginGetSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, parameters).map(new Func1<ServiceResponse<SearchResultsResponse>, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(ServiceResponse<SearchResultsResponse> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Submit a search for a given workspace. The response will contain an id to track the search. User can use the id to poll the search status and get the full search result later if the search takes long time to finish.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param parameters The parameters required to execute a search query.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<ServiceResponse<SearchResultsResponse>> beginGetSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginGetSearchResults(resourceGroupName, workspaceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SearchResultsResponse>>>() {
                @Override
                public Observable<ServiceResponse<SearchResultsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SearchResultsResponse> clientResponse = beginGetSearchResultsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SearchResultsResponse> beginGetSearchResultsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SearchResultsResponse, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SearchResultsResponse>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the SearchResultsResponse object if successful.
     */
    public SearchResultsResponse updateSearchResults(String resourceGroupName, String workspaceName, String id) {
        return updateSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, id).toBlocking().single().getBody();
    }

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SearchResultsResponse> updateSearchResultsAsync(String resourceGroupName, String workspaceName, String id, final ServiceCallback<SearchResultsResponse> serviceCallback) {
        return ServiceCall.create(updateSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, id), serviceCallback);
    }

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<SearchResultsResponse> updateSearchResultsAsync(String resourceGroupName, String workspaceName, String id) {
        return updateSearchResultsWithServiceResponseAsync(resourceGroupName, workspaceName, id).map(new Func1<ServiceResponse<SearchResultsResponse>, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(ServiceResponse<SearchResultsResponse> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets updated search results for a given search query.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param id The id of the search that will have results updated. You can get the id from the response of the GetResults call.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<ServiceResponse<SearchResultsResponse>> updateSearchResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, String id) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.updateSearchResults(resourceGroupName, workspaceName, id, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SearchResultsResponse>>>() {
                @Override
                public Observable<ServiceResponse<SearchResultsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SearchResultsResponse> clientResponse = updateSearchResultsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SearchResultsResponse> updateSearchResultsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SearchResultsResponse, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SearchResultsResponse>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
