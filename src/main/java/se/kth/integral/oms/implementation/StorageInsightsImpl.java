/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package se.kth.integral.oms.implementation;

import retrofit2.Retrofit;
import se.kth.integral.oms.StorageInsights;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import se.kth.integral.oms.models.PageImpl;
import se.kth.integral.oms.models.StorageInsight;

/**
 * An instance of this class provides access to all the operations defined
 * in StorageInsights.
 */
public final class StorageInsightsImpl implements StorageInsights {
    /** The Retrofit service to perform REST calls. */
    private StorageInsightsService service;
    /** The service client containing this operation class. */
    private AzureLogAnalyticsImpl client;

    /**
     * Initializes an instance of StorageInsightsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public StorageInsightsImpl(Retrofit retrofit, AzureLogAnalyticsImpl client) {
        this.service = retrofit.create(StorageInsightsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for StorageInsights to be
     * used by Retrofit to perform actually REST calls.
     */
    interface StorageInsightsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("storageInsightName") String storageInsightName, @Path("subscriptionId") String subscriptionId, @Body StorageInsight parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("storageInsightName") String storageInsightName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("storageInsightName") String storageInsightName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs")
        Observable<Response<ResponseBody>> listByWorkspace(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listByWorkspaceNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create or update a storage insight.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @return the StorageInsight object if successful.
     */
    public StorageInsight createOrUpdate(String resourceGroupName, String workspaceName, String storageInsightName, StorageInsight parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName, parameters).toBlocking().single().getBody();
    }

    /**
     * Create or update a storage insight.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<StorageInsight> createOrUpdateAsync(String resourceGroupName, String workspaceName, String storageInsightName, StorageInsight parameters, final ServiceCallback<StorageInsight> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName, parameters), serviceCallback);
    }

    /**
     * Create or update a storage insight.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @return the observable to the StorageInsight object
     */
    public Observable<StorageInsight> createOrUpdateAsync(String resourceGroupName, String workspaceName, String storageInsightName, StorageInsight parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName, parameters).map(new Func1<ServiceResponse<StorageInsight>, StorageInsight>() {
            @Override
            public StorageInsight call(ServiceResponse<StorageInsight> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Create or update a storage insight.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @return the observable to the StorageInsight object
     */
    public Observable<ServiceResponse<StorageInsight>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String storageInsightName, StorageInsight parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (storageInsightName == null) {
            throw new IllegalArgumentException("Parameter storageInsightName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, workspaceName, storageInsightName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageInsight>>>() {
                @Override
                public Observable<ServiceResponse<StorageInsight>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageInsight> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageInsight> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<StorageInsight, CloudException>(this.client.mapperAdapter())
                .register(201, new TypeToken<StorageInsight>() { }.getType())
                .register(200, new TypeToken<StorageInsight>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a storage insight instance.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @return the StorageInsight object if successful.
     */
    public StorageInsight get(String resourceGroupName, String workspaceName, String storageInsightName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName).toBlocking().single().getBody();
    }

    /**
     * Gets a storage insight instance.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<StorageInsight> getAsync(String resourceGroupName, String workspaceName, String storageInsightName, final ServiceCallback<StorageInsight> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName), serviceCallback);
    }

    /**
     * Gets a storage insight instance.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @return the observable to the StorageInsight object
     */
    public Observable<StorageInsight> getAsync(String resourceGroupName, String workspaceName, String storageInsightName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName).map(new Func1<ServiceResponse<StorageInsight>, StorageInsight>() {
            @Override
            public StorageInsight call(ServiceResponse<StorageInsight> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets a storage insight instance.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @return the observable to the StorageInsight object
     */
    public Observable<ServiceResponse<StorageInsight>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName, String storageInsightName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (storageInsightName == null) {
            throw new IllegalArgumentException("Parameter storageInsightName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, workspaceName, storageInsightName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageInsight>>>() {
                @Override
                public Observable<ServiceResponse<StorageInsight>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageInsight> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageInsight> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<StorageInsight, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<StorageInsight>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a storageInsightsConfigs resource.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     */
    public void delete(String resourceGroupName, String workspaceName, String storageInsightName) {
        deleteWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName).toBlocking().single().getBody();
    }

    /**
     * Deletes a storageInsightsConfigs resource.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String resourceGroupName, String workspaceName, String storageInsightName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName), serviceCallback);
    }

    /**
     * Deletes a storageInsightsConfigs resource.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String workspaceName, String storageInsightName) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, storageInsightName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes a storageInsightsConfigs resource.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that contains the storageInsightsConfigs resource
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String storageInsightName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (storageInsightName == null) {
            throw new IllegalArgumentException("Parameter storageInsightName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, workspaceName, storageInsightName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @return the PagedList&lt;StorageInsight&gt; object if successful.
     */
    public PagedList<StorageInsight> listByWorkspace(final String resourceGroupName, final String workspaceName) {
        ServiceResponse<Page<StorageInsight>> response = listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName).toBlocking().single();
        return new PagedList<StorageInsight>(response.getBody()) {
            @Override
            public Page<StorageInsight> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<StorageInsight>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName, final ListOperationCallback<StorageInsight> serviceCallback) {
        return AzureServiceCall.create(
            listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName),
            new Func1<String, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @return the observable to the PagedList&lt;StorageInsight&gt; object
     */
    public Observable<Page<StorageInsight>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName)
            .map(new Func1<ServiceResponse<Page<StorageInsight>>, Page<StorageInsight>>() {
                @Override
                public Page<StorageInsight> call(ServiceResponse<Page<StorageInsight>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @return the observable to the PagedList&lt;StorageInsight&gt; object
     */
    public Observable<ServiceResponse<Page<StorageInsight>>> listByWorkspaceWithServiceResponseAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName)
            .concatMap(new Func1<ServiceResponse<Page<StorageInsight>>, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(ServiceResponse<Page<StorageInsight>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
    ServiceResponse<PageImpl<StorageInsight>> * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
    ServiceResponse<PageImpl<StorageInsight>> * @param workspaceName Log Analytics Workspace name that will contain the storageInsightsConfigs resource
     * @return the PagedList&lt;StorageInsight&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageInsight>>> listByWorkspaceSinglePageAsync(final String resourceGroupName, final String workspaceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByWorkspace(resourceGroupName, workspaceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageInsight>> result = listByWorkspaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageInsight>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageInsight>> listByWorkspaceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<StorageInsight>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<StorageInsight>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;StorageInsight&gt; object if successful.
     */
    public PagedList<StorageInsight> listByWorkspaceNext(final String nextPageLink) {
        ServiceResponse<Page<StorageInsight>> response = listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StorageInsight>(response.getBody()) {
            @Override
            public Page<StorageInsight> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<StorageInsight>> listByWorkspaceNextAsync(final String nextPageLink, final ServiceCall<List<StorageInsight>> serviceCall, final ListOperationCallback<StorageInsight> serviceCallback) {
        return AzureServiceCall.create(
            listByWorkspaceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;StorageInsight&gt; object
     */
    public Observable<Page<StorageInsight>> listByWorkspaceNextAsync(final String nextPageLink) {
        return listByWorkspaceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StorageInsight>>, Page<StorageInsight>>() {
                @Override
                public Page<StorageInsight> call(ServiceResponse<Page<StorageInsight>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;StorageInsight&gt; object
     */
    public Observable<ServiceResponse<Page<StorageInsight>>> listByWorkspaceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByWorkspaceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StorageInsight>>, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(ServiceResponse<Page<StorageInsight>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the storage insight instances within a workspace.
     *
    ServiceResponse<PageImpl<StorageInsight>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;StorageInsight&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StorageInsight>>> listByWorkspaceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listByWorkspaceNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StorageInsight>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StorageInsight>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StorageInsight>> result = listByWorkspaceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StorageInsight>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StorageInsight>> listByWorkspaceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<StorageInsight>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<StorageInsight>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
