/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package se.kth.integral.azure.opinsights.implementation;

import retrofit2.Retrofit;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import se.kth.integral.azure.opinsights.SavedSearches;
import se.kth.integral.azure.opinsights.models.SavedSearch;
import se.kth.integral.azure.opinsights.models.SavedSearchesListResult;
import se.kth.integral.azure.opinsights.models.SearchResultsResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SavedSearches.
 */
public final class SavedSearchesImpl implements SavedSearches {
    /** The Retrofit service to perform REST calls. */
    private SavedSearchesService service;
    /** The service client containing this operation class. */
    private AzureLogAnalyticsImpl client;

    /**
     * Initializes an instance of SavedSearchesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SavedSearchesImpl(Retrofit retrofit, AzureLogAnalyticsImpl client) {
        this.service = retrofit.create(SavedSearchesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SavedSearches to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SavedSearchesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("savedSearchName") String savedSearchName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("savedSearchName") String savedSearchName, @Path("subscriptionId") String subscriptionId, @Body SavedSearch parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("savedSearchName") String savedSearchName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches")
        Observable<Response<ResponseBody>> listByWorkspace(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchName}/results")
        Observable<Response<ResponseBody>> getResults(@Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("savedSearchName") String savedSearchName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName Name of the saved search.
     */
    public void delete(String resourceGroupName, String workspaceName, String savedSearchName) {
        deleteWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).toBlocking().single().getBody();
    }

    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName Name of the saved search.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String resourceGroupName, String workspaceName, String savedSearchName, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName), serviceCallback);
    }

    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName Name of the saved search.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Deletes the specified saved search in a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName Name of the saved search.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (savedSearchName == null) {
            throw new IllegalArgumentException("Parameter savedSearchName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, workspaceName, savedSearchName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @return the SavedSearch object if successful.
     */
    public SavedSearch createOrUpdate(String resourceGroupName, String workspaceName, String savedSearchName, SavedSearch parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SavedSearch> createOrUpdateAsync(String resourceGroupName, String workspaceName, String savedSearchName, SavedSearch parameters, final ServiceCallback<SavedSearch> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @return the observable to the SavedSearch object
     */
    public Observable<SavedSearch> createOrUpdateAsync(String resourceGroupName, String workspaceName, String savedSearchName, SavedSearch parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName, parameters).map(new Func1<ServiceResponse<SavedSearch>, SavedSearch>() {
            @Override
            public SavedSearch call(ServiceResponse<SavedSearch> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or updates a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @return the observable to the SavedSearch object
     */
    public Observable<ServiceResponse<SavedSearch>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String savedSearchName, SavedSearch parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (savedSearchName == null) {
            throw new IllegalArgumentException("Parameter savedSearchName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, workspaceName, savedSearchName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SavedSearch>>>() {
                @Override
                public Observable<ServiceResponse<SavedSearch>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SavedSearch> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SavedSearch> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SavedSearch, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SavedSearch>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @return the SavedSearch object if successful.
     */
    public SavedSearch get(String resourceGroupName, String workspaceName, String savedSearchName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).toBlocking().single().getBody();
    }

    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SavedSearch> getAsync(String resourceGroupName, String workspaceName, String savedSearchName, final ServiceCallback<SavedSearch> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName), serviceCallback);
    }

    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @return the observable to the SavedSearch object
     */
    public Observable<SavedSearch> getAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).map(new Func1<ServiceResponse<SavedSearch>, SavedSearch>() {
            @Override
            public SavedSearch call(ServiceResponse<SavedSearch> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the specified saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The id of the saved search.
     * @return the observable to the SavedSearch object
     */
    public Observable<ServiceResponse<SavedSearch>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (savedSearchName == null) {
            throw new IllegalArgumentException("Parameter savedSearchName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, workspaceName, savedSearchName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SavedSearch>>>() {
                @Override
                public Observable<ServiceResponse<SavedSearch>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SavedSearch> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SavedSearch> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SavedSearch, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SavedSearch>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the saved searches for a given Log Analytics Workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the SavedSearchesListResult object if successful.
     */
    public SavedSearchesListResult listByWorkspace(String resourceGroupName, String workspaceName) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName).toBlocking().single().getBody();
    }

    /**
     * Gets the saved searches for a given Log Analytics Workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SavedSearchesListResult> listByWorkspaceAsync(String resourceGroupName, String workspaceName, final ServiceCallback<SavedSearchesListResult> serviceCallback) {
        return ServiceCall.create(listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName), serviceCallback);
    }

    /**
     * Gets the saved searches for a given Log Analytics Workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SavedSearchesListResult object
     */
    public Observable<SavedSearchesListResult> listByWorkspaceAsync(String resourceGroupName, String workspaceName) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName).map(new Func1<ServiceResponse<SavedSearchesListResult>, SavedSearchesListResult>() {
            @Override
            public SavedSearchesListResult call(ServiceResponse<SavedSearchesListResult> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the saved searches for a given Log Analytics Workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @return the observable to the SavedSearchesListResult object
     */
    public Observable<ServiceResponse<SavedSearchesListResult>> listByWorkspaceWithServiceResponseAsync(String resourceGroupName, String workspaceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByWorkspace(resourceGroupName, workspaceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SavedSearchesListResult>>>() {
                @Override
                public Observable<ServiceResponse<SavedSearchesListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SavedSearchesListResult> clientResponse = listByWorkspaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SavedSearchesListResult> listByWorkspaceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SavedSearchesListResult, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SavedSearchesListResult>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The name of the saved search.
     * @return the SearchResultsResponse object if successful.
     */
    public SearchResultsResponse getResults(String resourceGroupName, String workspaceName, String savedSearchName) {
        return getResultsWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).toBlocking().single().getBody();
    }

    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The name of the saved search.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<SearchResultsResponse> getResultsAsync(String resourceGroupName, String workspaceName, String savedSearchName, final ServiceCallback<SearchResultsResponse> serviceCallback) {
        return ServiceCall.create(getResultsWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName), serviceCallback);
    }

    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The name of the saved search.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<SearchResultsResponse> getResultsAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        return getResultsWithServiceResponseAsync(resourceGroupName, workspaceName, savedSearchName).map(new Func1<ServiceResponse<SearchResultsResponse>, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(ServiceResponse<SearchResultsResponse> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the results from a saved search for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Log Analytics workspace name
     * @param savedSearchName The name of the saved search.
     * @return the observable to the SearchResultsResponse object
     */
    public Observable<ServiceResponse<SearchResultsResponse>> getResultsWithServiceResponseAsync(String resourceGroupName, String workspaceName, String savedSearchName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (savedSearchName == null) {
            throw new IllegalArgumentException("Parameter savedSearchName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getResults(resourceGroupName, workspaceName, savedSearchName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SearchResultsResponse>>>() {
                @Override
                public Observable<ServiceResponse<SearchResultsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SearchResultsResponse> clientResponse = getResultsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SearchResultsResponse> getResultsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<SearchResultsResponse, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<SearchResultsResponse>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
